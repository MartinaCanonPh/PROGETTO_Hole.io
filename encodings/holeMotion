%hole.io encoding ASP program
%the constant 4 stands for the variable speed in the class HoleLogic.
down(X, Y+4) | up(X, Y-4)| left(X-4, Y) | right(X+4, Y)  :- hole(X,Y).
%
:-brick(X,Y), down(X,Y).
:-brick(X,Y), up(X,Y).
:-brick(X,Y), left(X,Y).
:-brick(X,Y), right(X,Y).
%
%rules and constraints to avoid the loop checking previous positions
posPrec(A,B) :- hole(X,B), right(X,B), A=X-1.
posPrec(A,B) :- hole(X,B), left(X,B), A=X+1.
posPrec(X,Y) :- hole(X,B), up(X,B), Y=B+1.
posPrec(X,Y) :- hole(X,B), down(X,B), Y=B-1.
%
%
:- posPrec(X,Y), right(X,Y).
:- posPrec(X,Y), left (X,Y).
:- posPrec(X,Y), up(X,Y).
:- posPrec(X,Y), down(X,Y).
%
%%after going down
distFromItem(Z) :- down(A,B), item(C,D), E = A-C, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- down(A,B), item(C,D), E = C-A, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- down(A,B), item(C,D), E = A-C, F = D-B, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- down(A,B), item(C,D), E = C-A, F = D-B, Z = E+F, E>=0, F>=0.
%
%%after going up
distFromItem(Z) :- up(A,B), item(C,D), E = A-C, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- up(A,B), item(C,D), E = C-A, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- up(A,B), item(C,D), E = A-C, F = D-B, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- up(A,B), item(C,D), E = C-A, F = D-B, Z = E+F, E>=0, F>=0.
%
%%after going right
distFromItem(Z) :- right(A,B), item(C,D), E = A-C, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- right(A,B), item(C,D), E = C-A, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- right(A,B), item(C,D), E = A-C, F = D-B, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- right(A,B), item(C,D), E = C-A, F = D-B, Z = E+F, E>=0, F>=0.
%
%%after going left
distFromItem(Z) :- left(A,B), item(C,D), E = A-C, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- left(A,B), item(C,D), E = C-A, F = B-D, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- left(A,B), item(C,D), E = A-C, F = D-B, Z = E+F, E>=0, F>=0.
distFromItem(Z) :- left(A,B), item(C,D), E = C-A, F = D-B, Z = E+F, E>=0, F>=0.
%
:~distFromItem(D). [1@D]